// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// +build linux,amd64,go1.15,!cgo

package portfolioStorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfolioStorageClient is the client API for PortfolioStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioStorageClient interface {
	UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error)
	GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error)
}

type portfolioStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioStorageClient(cc grpc.ClientConnInterface) PortfolioStorageClient {
	return &portfolioStorageClient{cc}
}

func (c *portfolioStorageClient) UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error) {
	out := new(UpdatePortfolioResponse)
	err := c.cc.Invoke(ctx, "/PortfolioStorage.PortfolioStorage/UpdatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioStorageClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error) {
	out := new(GetPortfolioResponse)
	err := c.cc.Invoke(ctx, "/PortfolioStorage.PortfolioStorage/GetPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioStorageServer is the server API for PortfolioStorage service.
// All implementations must embed UnimplementedPortfolioStorageServer
// for forward compatibility
type PortfolioStorageServer interface {
	UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error)
	GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error)
	mustEmbedUnimplementedPortfolioStorageServer()
}

// UnimplementedPortfolioStorageServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioStorageServer struct {
}

func (UnimplementedPortfolioStorageServer) UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolio not implemented")
}
func (UnimplementedPortfolioStorageServer) GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedPortfolioStorageServer) mustEmbedUnimplementedPortfolioStorageServer() {}

// UnsafePortfolioStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioStorageServer will
// result in compilation errors.
type UnsafePortfolioStorageServer interface {
	mustEmbedUnimplementedPortfolioStorageServer()
}

func RegisterPortfolioStorageServer(s grpc.ServiceRegistrar, srv PortfolioStorageServer) {
	s.RegisterService(&PortfolioStorage_ServiceDesc, srv)
}

func _PortfolioStorage_UpdatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioStorageServer).UpdatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortfolioStorage.PortfolioStorage/UpdatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioStorageServer).UpdatePortfolio(ctx, req.(*UpdatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioStorage_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioStorageServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortfolioStorage.PortfolioStorage/GetPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioStorageServer).GetPortfolio(ctx, req.(*GetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioStorage_ServiceDesc is the grpc.ServiceDesc for PortfolioStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortfolioStorage.PortfolioStorage",
	HandlerType: (*PortfolioStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePortfolio",
			Handler:    _PortfolioStorage_UpdatePortfolio_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _PortfolioStorage_GetPortfolio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_utils/proto/PortfolioStorage/portfolio_storage.proto",
}
